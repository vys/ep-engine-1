#!/usr/bin/env python

#   Copyright 2013 Zynga inc.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import os
import sys
import exceptions
import string
import random

try:
    import sqlite3
except:
    sys.exit("ERROR: %s requires sqlite3 for Python." %
              (os.path.basename(sys.argv[0])))

def main():
    random.seed(0)
    db = sqlite3.connect('mbbackup-0001.mbb')
    db.text_factory = str
    createSchema(db)
    print 'Generating mbbackup-0001.mbb'
    generate(db, 10, 0, 1000, 10000, 32767)
    db.close()
    print 'Generating mbbackup-0002.mbb'
    db = sqlite3.connect('mbbackup-0002.mbb')
    db.text_factory = str
    createSchema(db)
    generate(db, 10, 1000, 2000, 10000, 32767)
    db.close()
    print 'Generating mbbackup-0003.mbb'
    db = sqlite3.connect('mbbackup-0003.mbb')
    db.text_factory = str
    createSchema(db)
    generate(db, 1, 0, 200, 5000, 32767, False)
    db.close()

def generate(db, maxvbid, cpointoffset,  maxcheckpoints, maxoperations, maxsize, deletes = True):
    insert_cpoint_state = "INSERT into cpoint_state" \
                "(vbucket_id, cpoint_id, prev_cpoint_id, state, source, updated_at)" \
                " VALUES (?, ?, ?, ?, ?, ?)"
    insert_cpoint_op = "INSERT into cpoint_op" \
            "(vbucket_id, cpoint_id, seq, op, key, flg, exp, cas, cksum, val)" \
            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
    for vbucketId in range(maxvbid):
        cid = cpointoffset
        while cid < maxcheckpoints:
            state = 'closed'
            if random.randint(0, 1000) == 666:
                state = 'open'
            db.execute(insert_cpoint_state, (vbucketId, cid, '0', state, 'notused', 'notused'))
            cid = cid + 1

        db.commit()

    seq = 0
    non_di_cksum = "0001:"
    while seq < maxoperations:
        if maxvbid == 1:
            vbucketId = 0
        else:
            vbucketId = random.randint(0, maxvbid)

        checkpointId = random.randint(cpointoffset, maxcheckpoints)
        seq = seq + 1
        cmdOp = 'm'
        key = ''.join(random.choice(string.letters + string.digits) for i in xrange(random.randint(1, 250)))
        val = ''.zfill(random.randint(0, maxsize))
        if deletes and random.randint(0, 1000) == 666:
            cmdOp = 'd'
            value = ''

        exp = '0'
        flg = random.randint(0, 0xdeadbeef)
        cas = random.randint(0, 10000000)

        db.execute(insert_cpoint_op, (vbucketId, checkpointId, seq, cmdOp,
                       key, flg, exp, cas, non_di_cksum, val))
        if seq % 100 == 0:
            db.commit()

    # Add some extra well know items I can update in the test
    db.execute(insert_cpoint_op, (0, maxcheckpoints - 1, seq, 'm',
                       'mykey1', 0xdeadbeef, 0, 0xcafecafe, non_di_cksum,''.zfill(1024)))
    if deletes:
        db.execute(insert_cpoint_op, (0, maxcheckpoints - 1, seq + 1, 'd',
                       'mykey2', 0xdeadbeef, 0, 0xcafecafe, non_di_cksum, ''))
    db.execute(insert_cpoint_op, (0, maxcheckpoints - 1, seq + 2, 'm',
                       'mykey3', 0xdeadbeef, 0, 0xcafecafe, non_di_cksum, ''.zfill(1)))
    db.execute(insert_cpoint_op, (0, maxcheckpoints - 1, seq + 3, 'm',
                       'mykey4', 0xdeadbeef, 1, 0xcafecafe, non_di_cksum,''.zfill(1)))
    db.commit()

def createSchema(db):
    db.executescript("""
BEGIN;
DROP TABLE IF EXISTS cpoint_op;
DROP TABLE IF EXISTS cpoint_state;
CREATE TABLE cpoint_op
  (vbucket_id integer, cpoint_id integer, seq integer, op text,
   key varchar(250), flg integer, exp integer, cas integer, cksum varchar(100), val blob);
CREATE TABLE cpoint_state
  (vbucket_id integer, cpoint_id integer, prev_cpoint_id integer, state varchar(1),
   source varchar(250), updated_at text);
COMMIT;
""")

if __name__ == '__main__':
    main()
